# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
- group: Terraform_variables

trigger:
- master
- main

pool:
  GitOps

stages:
  - stage: Terraform_Plan
    jobs:
    - job: Terraform_Plan
      continueOnError: false
      steps:
      - task: TerraformInstaller@0
        displayName: 'install Terraform 0.13'
        inputs:
          terraformVersion: '0.13.5'


      - task: TerraformCLI@0
        displayName: 'Terraform init'
        inputs:
          command: 'init'
          backendType: 'azurerm'
          backendServiceArm: 'Terraform-Azure-Devops'
          backendAzureRmResourceGroupName: 'RSG-Management-10'
          backendAzureRmStorageAccountName: 'saterraform'
          backendAzureRmContainerName: 'tfstate'
          backendAzureRmKey: 'tfstate'
          allowTelemetryCollection: true

      - task: TerraformCLI@0
        displayName: 'Terraform Validate'
        inputs:
          command: 'validate'
          allowTelemetryCollection: true

 
      - task: TerraformCLI@0
        displayName: 'Terraform Plan'
        inputs:
          command: 'plan'
          environmentServiceName: 'Terraform-Azure-Devops'
          commandOptions: '-var admin_password="$(admin_password)" -var admin_username="$(admin_username)"'
          allowTelemetryCollection: true

  - stage: Approval_Change
    dependsOn: [Terraform_Plan]
    condition: succeeded('Terraform_Plan')
    jobs:
    - deployment: Approval_of_Change
      continueOnError: false
      environment: 'Approval-Gate'
      timeoutInMinutes: 120
      strategy:
       runOnce:
        deploy: 
          steps:
          - task: TerraformInstaller@0
            displayName: 'install Terraform 0.13'
            inputs:
              terraformVersion: '0.13.5'


          - task: TerraformCLI@0
            displayName: 'Terraform init'
            inputs:
              command: 'init'
              backendType: 'azurerm'
              backendServiceArm: 'Terraform-Azure-Devops'
              backendAzureRmResourceGroupName: 'RSG-Management-10'
              backendAzureRmStorageAccountName: 'saterraform'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'tfstate'
              allowTelemetryCollection: true          

          - task: TerraformCLI@0
            displayName: 'Terraform Apply'
            inputs:
              command: 'apply'
              environmentServiceName: 'Terraform-Azure-Devops'
              allowTelemetryCollection: true
              commandOptions: '-var admin_password="$(admin_password)" -var admin_username="$(admin_username)"'


 
